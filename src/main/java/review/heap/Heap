Heap is a special type of binary tree with 2 properties:
- it must be a complete tree: every level except the last is completely filled and levels are complete from left to right
- value of every node must be equal or greater than the children (max heap) OR value of every nopde must be equal or smaller than
the children (min heap)

Heap is NOT a Binary Search Tree

Heap is generally used
- to implement priority queues (min heap)
- sorting (heapsort) - insert array into heap then remove the root element every time and insert into array -> sorted in desc order (if max heap)
- graph algorithms (Djikstra shortest path)
- selection algorithms


Insertion process:
1. add the element to the next available position to maintain complete tree property
2. bubble up to maintain heap property

Removal process:
1. Always remove the root
2. move the last leaf node into the root place to maintain complete tree property
3. bubble down to maintain heap property


Heaps can be implemented by using arrays as well as tree but since it is a complete binary tree we don't need a tree structure to
implement it

Formula:
Index of left child = parent * 2 + 1
Index of right child = parent * 2 + 2

Parent = (index - 1) / 2

SORTING:

sorting (heapsort)
- insert array into heap
- remove the root element every time and insert into array -> you get array sorted in desc order (if max heap was used)
- time complexity nlogn + nlogn ==> nlogn

OPTIMIZE:
Converting an array to a heap in place --> HEAPIFY:
- start from (n/2 -1) to index 0 --> exclude the leaves because they don't have children -> saves time because at least half of the heap are leaves
- compare the greatest of children with the parent and bubbleUp() if needed
- continue till 0 index

